name: Build Docker images and push to registry

on:
  push:
    branches:
        - main
    paths:
        - cmd/**
        - pkg/**
        - Dockerfile
        - go.mod
        - go.sum
    tags:
      - v*.*.*
    
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build
    runs-on: [ default ]
    continue-on-error: true
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.8.0
        with:
          cosign-release: 'v2.2.3'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
          labels: |
            org.opencontainers.image.title=Concourse resource for artifacts in an OCI registry
            org.opencontainers.image.description=Fetches, verifies and publishes Helm Charts from a running OCI registry.
            org.opencontainers.image.url=https://github.com/cloudoperators/concourse-oci-helm-chart-resource
            org.opencontainers.image.source=https://github.com/cloudoperators/concourse-oci-helm-chart-resource
            org.opencontainers.image.documentation=https://github.com/cloudoperators/concourse-oci-helm-chart-resource/tree/main/README.md

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          platforms: |
            linux/amd64
            linux/arm64

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  vulnerability-scan:
    permissions:
      contents: read
      packages: read
      security-events: write
    strategy:
      fail-fast: false
    name: Vulnerability Scan
    needs: build
    runs-on: [ default ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set sha
        id: vars
        run: echo "sha_short=sha-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.29.0
        if: success()
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
